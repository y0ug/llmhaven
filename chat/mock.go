// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/y0ug/llmhaven/chat (interfaces: Provider)
//
// Generated by this command:
//
//	mockgen -destination=mock.go -package=chat . Provider
//

// Package chat is a generated GoMock package.
package chat

import (
	context "context"
	reflect "reflect"

	streaming "github.com/y0ug/llmhaven/http/streaming"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockProvider) Send(ctx context.Context, params ChatParams) (*ChatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, params)
	ret0, _ := ret[0].(*ChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockProviderMockRecorder) Send(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockProvider)(nil).Send), ctx, params)
}

// Stream mocks base method.
func (m *MockProvider) Stream(ctx context.Context, params ChatParams) (streaming.Streamer[EventStream], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stream", ctx, params)
	ret0, _ := ret[0].(streaming.Streamer[EventStream])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stream indicates an expected call of Stream.
func (mr *MockProviderMockRecorder) Stream(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockProvider)(nil).Stream), ctx, params)
}
