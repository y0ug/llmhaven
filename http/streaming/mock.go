// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/y0ug/llmhaven/http/streaming (interfaces: Streamer,Decoder)
//
// Generated by this command:
//
//	mockgen -destination=mock.go -package=streaming . Streamer,Decoder
//

// Package streaming is a generated GoMock package.
package streaming

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStreamer is a mock of Streamer interface.
type MockStreamer[E any] struct {
	ctrl     *gomock.Controller
	recorder *MockStreamerMockRecorder[E]
	isgomock struct{}
}

// MockStreamerMockRecorder is the mock recorder for MockStreamer.
type MockStreamerMockRecorder[E any] struct {
	mock *MockStreamer[E]
}

// NewMockStreamer creates a new mock instance.
func NewMockStreamer[E any](ctrl *gomock.Controller) *MockStreamer[E] {
	mock := &MockStreamer[E]{ctrl: ctrl}
	mock.recorder = &MockStreamerMockRecorder[E]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamer[E]) EXPECT() *MockStreamerMockRecorder[E] {
	return m.recorder
}

// Close mocks base method.
func (m *MockStreamer[E]) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStreamerMockRecorder[E]) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStreamer[E])(nil).Close))
}

// Current mocks base method.
func (m *MockStreamer[E]) Current() E {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(E)
	return ret0
}

// Current indicates an expected call of Current.
func (mr *MockStreamerMockRecorder[E]) Current() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockStreamer[E])(nil).Current))
}

// Err mocks base method.
func (m *MockStreamer[E]) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockStreamerMockRecorder[E]) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockStreamer[E])(nil).Err))
}

// Next mocks base method.
func (m *MockStreamer[E]) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockStreamerMockRecorder[E]) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockStreamer[E])(nil).Next))
}

// MockDecoder is a mock of Decoder interface.
type MockDecoder[E any] struct {
	ctrl     *gomock.Controller
	recorder *MockDecoderMockRecorder[E]
	isgomock struct{}
}

// MockDecoderMockRecorder is the mock recorder for MockDecoder.
type MockDecoderMockRecorder[E any] struct {
	mock *MockDecoder[E]
}

// NewMockDecoder creates a new mock instance.
func NewMockDecoder[E any](ctrl *gomock.Controller) *MockDecoder[E] {
	mock := &MockDecoder[E]{ctrl: ctrl}
	mock.recorder = &MockDecoderMockRecorder[E]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDecoder[E]) EXPECT() *MockDecoderMockRecorder[E] {
	return m.recorder
}

// Close mocks base method.
func (m *MockDecoder[E]) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDecoderMockRecorder[E]) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDecoder[E])(nil).Close))
}

// Current mocks base method.
func (m *MockDecoder[E]) Current() E {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(E)
	return ret0
}

// Current indicates an expected call of Current.
func (mr *MockDecoderMockRecorder[E]) Current() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockDecoder[E])(nil).Current))
}

// Err mocks base method.
func (m *MockDecoder[E]) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockDecoderMockRecorder[E]) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockDecoder[E])(nil).Err))
}

// Next mocks base method.
func (m *MockDecoder[E]) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockDecoderMockRecorder[E]) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockDecoder[E])(nil).Next))
}
